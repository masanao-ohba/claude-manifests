# CLAUDE.md - E-Commerce Platform (Admin)

**Configuration Status**: PERMANENT
**Purpose**: Multi-repository e-commerce admin project specific conventions

## Absolute Rules - Project Priority Principle

### Rule Priority

**Important**: When project documentation conflicts with AI general knowledge, follow project documentation

Priority (High → Low):
1. Explicit project rules (CLAUDE.md, README.md) ← Highest Authority
2. Production code behavior (what actually exists)
3. AI general knowledge (Docker, frameworks, etc.) ← Lowest Authority

**Reason for this hierarchy**:
- This is a legacy multi-tenant system with specific architectural decisions
- Framework conventions have been customized for performance at scale
- Team has developed specific patterns over 5+ years of operation

---

## Multi-Repository Configuration

This project is part of a multi-repository e-commerce system:

```
E-Commerce Platform/
├── admin/          # Admin interface (THIS REPOSITORY)
├── storefront/     # Customer-facing store
├── api/            # REST API service
└── batch/          # Background job processing

Shared Libraries/
├── payment-lib/    # Payment gateway integration
├── inventory-lib/  # Inventory management
└── notification/   # Email/SMS notifications
```

**Inter-Repository Dependencies**:
- admin → depends on payment-lib, inventory-lib, notification
- storefront → depends on payment-lib, inventory-lib, notification
- api → depends on payment-lib, inventory-lib
- batch → depends on inventory-lib, notification

**Production Code Verification Protocol**:
Before creating tests, search ALL repositories to verify production code exists:
1. Check current repository first
2. If not found, search storefront, api, batch repositories
3. Use quality-reviewer agent for multi-repo search

---

## Project-Specific Standards

### Test Comment Format (Required)

**This format is project-specific and MANDATORY**:

```php
/**
 * [Feature description - business-focused]
 *
 * Guarantees:
 * 1. [Specific guarantee - what breaks if this test fails]
 * 2. [Another specific guarantee - numbered list required]
 *
 * Loss on Failure:
 * - [Business impact if test doesn't exist - financial/operational]
 * - [Additional impact]
 *
 * @return void
 */
public function testFeatureName(): void
```

**Why project-specific**:
- Business stakeholders review test documentation
- Need to justify test maintenance costs to management
- Historical incident tracking requires business impact documentation

**Example**:
```php
/**
 * Verifies that administrators can bulk update product inventory
 *
 * Guarantees:
 * 1. Bulk updating 100+ products does not cause database locks
 * 2. When inventory is being updated, other admins attempting to edit the same product receive appropriate error messages
 *
 * Loss on Failure:
 * - Database locks during inventory updates → Admin operations halted → $3,000/hour × 10 people × 30 min average = $15,000 per incident
 * - Inventory data corruption → Incorrect shipments to customers → Average loss $50,000 per incident
 *
 * @return void
 */
public function testBulkInventoryUpdateWithoutLocking(): void
```

**Enforcement**: quality-reviewer agent validates this format before commit

---

### Multi-Tenant Database Pattern

**Architecture**: Per-tenant database isolation

**Pattern**: `db_company_{company_id}`

**Schema Types**:
- **SharedSchema**: Global account data (shared_account_db)
  - Companies table
  - Users table
  - Subscription plans table

- **TenantSchema**: Per-company business data (db_company_*)
  - Products table
  - Orders table
  - Customers table

**Migration Rules**:
1. SharedSchema migrations → `migrations/shared/`
2. TenantSchema migrations → `migrations/tenant/`
3. ALWAYS test migrations on sandbox tenant database first
4. quality-reviewer agent checks schema consistency across all tenant databases

**Why project-specific**:
- SaaS architecture with 500+ tenant databases
- Each tenant must have identical schema
- Schema drift detection is critical for data integrity

---

### Test Execution Requirements

**Docker-Based Testing (Mandatory)**:

❌ **NEVER run tests directly on localhost**
✅ **ALWAYS use Docker containers**

**Reason**:
- Localhost uses PHP 7.4 (legacy development environment)
- Production and CI use PHP 8.2
- Version mismatch causes false test passes

**Test Execution Command**:
```bash
docker compose -f docker-compose.test.yml up --abort-on-container-exit --build
```

**Test Database**:
- Prefix: `test_`
- Automatically created/destroyed per test run
- Uses fixtures from `tests/Fixture/`

---

### Production Configuration Usage in Tests

**Rule**: Tests MUST use production configuration values

❌ **PROHIBITED**:
```php
// NEVER override configuration in tests
public function testFeature(): void
{
    Configure::write('Feature.enabled', true); // ❌ WRONG
    // ...
}
```

✅ **REQUIRED**:
```php
// ALWAYS read production configuration
public function testFeature(): void
{
    $featureEnabled = Configure::read('Feature.enabled'); // ✅ CORRECT

    if (!$featureEnabled) {
        $this->markTestSkipped('Feature disabled in this environment');
    }
    // ...
}
```

**Rationale**:
- Tests must verify actual production behavior
- Configuration overrides hide production issues
- Historical incident: test-only config masked production bug → 2 hour outage

---

### Prohibited Patterns

#### 1. Direct Database Query in Controllers (Prohibited)

❌ **PROHIBITED**:
```php
// Controllers should NEVER use raw SQL
public function index()
{
    $connection = ConnectionManager::get('default');
    $results = $connection->execute('SELECT * FROM products')->fetchAll('assoc'); // ❌
}
```

✅ **REQUIRED**:
```php
// Use Table classes and ORM
public function index()
{
    $products = $this->Products->find('all')->toArray(); // ✅
}
```

**Reason**: ORM provides tenant database routing logic

---

#### 2. Hardcoded Company IDs (Prohibited)

❌ **PROHIBITED**:
```php
$companyId = 123; // ❌ Hardcoded
```

✅ **REQUIRED**:
```php
$companyId = $this->Authentication->getIdentity()->company_id; // ✅ From session
```

**Reason**: Multi-tenant isolation requirement

---

#### 3. Skip Validation in Production Code (Prohibited)

❌ **PROHIBITED**:
```php
$entity = $this->Products->patchEntity($product, $data, ['validate' => false]); // ❌
```

✅ **REQUIRED**:
```php
$entity = $this->Products->patchEntity($product, $data); // ✅ Validation enabled
```

**Reason**: Data integrity is critical for financial transactions

---

## Custom Approval Workflow

All code changes require:

1. **Code Review** (Technical quality)
   - PHPUnit tests pass
   - PSR-12 compliance
   - No security vulnerabilities

2. **Business Logic Review** (Functional correctness)
   - Product manager approval
   - Test comments include business impact

3. **Multi-Tenant Validation** (Data isolation)
   - quality-reviewer confirms schema consistency
   - Test includes multi-tenant scenarios

---

## Quality Gates

Before merge, ALL must pass:

- [ ] PHPUnit test coverage ≥ 80%
- [ ] No PHPStan errors (level 6)
- [ ] Test comments in required format
- [ ] Docker-based test execution confirmed
- [ ] Migration tested on sandbox tenant
- [ ] No hardcoded company IDs
- [ ] No raw SQL in Controllers
- [ ] Multi-repository code search completed (if adding tests)

---

## Emergency Override Protocol

**When**: Production incident requires immediate fix

**Process**:
1. Create hotfix branch from `main`
2. Implement minimal fix only
3. Deploy to production
4. Create follow-up ticket for proper tests/documentation
5. Label PR with `[HOTFIX]` tag

**Post-Deployment**:
- Document incident in `.work/issue-solutions.yaml`
- Add regression test within 2 business days
- Update CLAUDE.md if new pattern discovered

---

## Historical Context

**Project Age**: 6 years
**Team Size**: 8 developers
**Tenant Count**: 500+ companies
**Daily Transactions**: ~10,000 orders

**Why These Rules Exist**:
These standards evolved from real production incidents:
- Test comment format → After $50K bug from untested edge case
- Docker test requirement → After PHP version mismatch caused 2hr outage
- Multi-repo verification → After tests created for non-existent code
- Configuration override prohibition → After test-only config masked production bug

---

## Maintenance

**Review Frequency**: Quarterly
**Next Review**: 2025-Q2
**Owner**: Tech Lead (@tech-lead-username)

**Changelog**:
- 2025-01-15: Added emergency override protocol
- 2024-10-01: Strengthened test comment requirements
- 2024-07-01: Added multi-repository verification protocol
