# .claude/config.yaml - E-Commerce Platform (Admin) Configuration

# ============================================================================
# Repository Metadata
# ============================================================================
repo_metadata:
  name: ecommerce-admin
  type: saas-admin
  description: Multi-tenant e-commerce platform admin interface

  tech_stack:
    language: PHP
    language_version: "8.2"
    framework: CakePHP
    framework_version: "4.4"
    test_framework: PHPUnit
    test_framework_version: "11.5"

  # Multi-repository context
  repository_group: ecommerce-platform
  repository_role: admin

# ============================================================================
# Agent-Skill Assignments (Generic Agents)
# ============================================================================
agent_skills:
  # Workflow orchestration
  workflow-orchestrator:
    - generic/workflow-patterns

  # Requirements analysis
  requirement-analyst:
    - generic/requirement-analyzer
    - php/requirement-patterns
    - php-cakephp/requirement-analyzer

  # Software design and architecture
  design-architect:
    - generic/software-designer
    - php/architectural-patterns
    - php-cakephp/functional-designer      # CakePHP MVC patterns
    - php-cakephp/database-designer        # CakePHP ORM/migrations
    - php-cakephp/multi-tenant-designer    # Multi-tenant architecture patterns

  # Test strategy and planning
  test-strategist:
    - generic/test-planner
    - php/testing-standards                # PHPUnit best practices
    - php-cakephp/test-case-designer       # CakePHP test patterns

  # Code implementation
  code-developer:
    - generic/code-implementer
    - php/coding-standards                 # PSR-12
    - php/security-patterns                # OWASP, input validation
    - php-cakephp/code-implementer         # CakePHP conventions
    - php-cakephp/multi-tenant-handler     # Tenant isolation logic

  # Quality review (handles all validation use cases)
  quality-reviewer:
    - generic/code-reviewer
    - php/coding-standards                 # PSR-12 compliance
    - php/security-patterns                # Security audit
    - php-cakephp/code-reviewer            # CakePHP best practices
    - php-cakephp/multi-tenant-reviewer    # Tenant isolation validation
    - php-cakephp/test-validator           # Test quality validation
    - php-cakephp/migration-checker        # Migration validation

  # Deliverable evaluation
  deliverable-evaluator:
    - generic/evaluation-criteria
    - php-cakephp/deliverable-criteria     # CakePHP project standards

# ============================================================================
# Technology-Specific Agents (Rarely Needed)
# ============================================================================
# NOTE: Generic agents + skills handle 99%+ of use cases.
# Only create tech-specific agents for truly framework-unique workflows.
agents: {}

# ============================================================================
# Database Configuration
# ============================================================================
database:
  architecture: multi-tenant
  pattern: "db_company_%d"

  # Schema definitions
  schemas:
    - name: SharedSchema
      type: shared
      database: shared_account_db
      description: Global account and subscription data
      tables:
        - companies
        - users
        - subscription_plans
        - billing_history

    - name: TenantSchema
      type: per-tenant
      database: "db_company_%d"
      description: Per-company business data
      tables:
        - products
        - orders
        - customers
        - inventory
        - sales_reports

  # Migration paths
  migration_paths:
    shared: migrations/shared/
    tenant: migrations/tenant/

  # Connection pool settings
  connections:
    max_connections: 100
    idle_timeout: 300

# ============================================================================
# Test Configuration
# ============================================================================
test:
  # Docker-based test execution (MANDATORY)
  docker_command: "docker compose -f docker-compose.test.yml run --rm web"

  # Test database settings
  test_database_prefix: test_
  auto_cleanup: true

  # Fixture configuration
  fixture_namespaces:
    - App\Test\Fixture
    - SharedSchema\Test\Fixture
    - TenantSchema\Test\Fixture

  # Test constants
  constants:
    TEST_COMPANY_ID: 999
    TEST_USER_ID: 1
    SANDBOX_TENANT_DB: db_company_999

  # Coverage requirements
  coverage:
    minimum: 80
    exclude:
      - tests/
      - config/
      - webroot/

  # Performance benchmarks
  performance:
    max_test_duration: 300  # 5 minutes for full suite
    slow_test_threshold: 1  # Warn if single test > 1 second

# ============================================================================
# File Path Configuration
# ============================================================================
paths:
  # Application structure
  controllers: src/Controller/
  models: src/Model/Table/
  components: src/Controller/Component/
  templates: templates/
  migrations: config/Migrations/

  # Test structure
  fixtures: tests/Fixture/
  test_cases: tests/TestCase/
  integration_tests: tests/Integration/

  # Configuration
  routes: config/routes.php
  bootstrap: config/bootstrap.php

# ============================================================================
# Multi-Repository Dependencies
# ============================================================================
dependencies:
  # Services this repository depends on
  depends_on:
    - repository: payment-lib
      type: composer-package
      version: "^2.0"
      description: Payment gateway integration

    - repository: inventory-lib
      type: composer-package
      version: "^1.5"
      description: Inventory management shared logic

    - repository: notification
      type: composer-package
      version: "^1.2"
      description: Email/SMS notification service

  # Services that depend on this repository
  referenced_by:
    - repository: ecommerce-storefront
      description: Uses admin API for product management

    - repository: ecommerce-batch
      description: Reads admin database for report generation

# ============================================================================
# Code Quality Standards
# ============================================================================
quality:
  # Static analysis
  phpstan:
    level: 6
    paths:
      - src/
      - tests/

  # Code style
  phpcs:
    standard: PSR12
    ignore:
      - vendor/
      - webroot/

  # Security scanning
  security:
    enabled: true
    tools:
      - psalm
      - local-php-security-checker

# ============================================================================
# Deployment Configuration
# ============================================================================
deployment:
  strategy: blue-green
  environments:
    - development
    - staging
    - production

  # Pre-deployment checks
  pre_deploy_checks:
    - run_tests: true
    - migration_dry_run: true
    - security_scan: true
    - phpstan_analysis: true

# ============================================================================
# Output Configuration
# ============================================================================
output:
  language: japanese  # Test comments and documentation in Japanese
  code_language: english  # Code and variable names in English

# ============================================================================
# Custom Hooks
# ============================================================================
hooks:
  # Pre-commit validation
  pre_commit:
    - quality-reviewer        # Validates test quality, migrations, and code quality

  # Pre-merge validation
  pre_merge:
    - quality-reviewer        # Final comprehensive code review

# ============================================================================
# Documentation
# ============================================================================
documentation:
  readme: README.md
  claude_md: CLAUDE.md
  api_docs: docs/api/
  architecture: docs/architecture.md

# ============================================================================
# Team Configuration
# ============================================================================
team:
  size: 8
  roles:
    - Backend Developer
    - Frontend Developer
    - QA Engineer
    - DevOps Engineer

  code_review:
    min_approvals: 2
    require_tests: true
    require_documentation: true
